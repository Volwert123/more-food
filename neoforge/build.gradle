plugins {
    id 'com.github.johnrengelman.shadow'
}

architectury {
    platformSetupLoomIde()
    neoForge()
}

loom {
    runs {
        dataClient {
            clientData()
            programArgs '--all', '--mod', 'more_food'
            programArgs '--output', project(':common').file('src/main/generated').absolutePath
            programArgs '--existing', project(':common').file('src/main/resources').absolutePath
        }
    }
}

configurations {
    common {
        canBeResolved = true
        canBeConsumed = false
    }

    shadowCommon
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentNeoForge.extendsFrom common

    shadowBundle {
        canBeResolved = true
        canBeConsumed = false
    }
}

repositories {
    maven { url 'https://maven.neoforged.net/releases/' }
}

dependencies {
    neoForge "net.neoforged:neoforge:${project.neoforge_version}"

    modApi "dev.architectury:architectury-neoforge:${project.architectury_api_version}"

    common(project(path: ':common', configuration: 'namedElements')) { transitive false }
    shadowBundle project(path: ':common', configuration: 'transformProductionNeoForge')
}

processResources {
    inputs.property 'version', project.version

    filesMatching('META-INF/neoforge.mods.toml') {
        expand version: project.version
    }
}

shadowJar {
    exclude '**/more_food/datagen/**'
    exclude '.cache/**'

    configurations = [project.configurations.shadowBundle]
    archiveClassifier = 'dev-shadow'
}

remapJar {
    input.set shadowJar.archiveFile
}